# Simple FTP Daemon CMake Package Configuration
# This file is automatically generated by CMake

@PACKAGE_INIT@

# Include the package version file
include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-config-version.cmake")

# Set package properties
set(@PROJECT_NAME@_VERSION "@PROJECT_VERSION@")
set(@PROJECT_NAME@_VERSION_MAJOR "@PROJECT_VERSION_MAJOR@")
set(@PROJECT_NAME@_VERSION_MINOR "@PROJECT_VERSION_MINOR@")
set(@PROJECT_NAME@_VERSION_PATCH "@PROJECT_VERSION_PATCH@")

# Find required dependencies
find_package(OpenSSL REQUIRED)
find_package(PkgConfig REQUIRED)

# Find jsoncpp
pkg_check_modules(JSONCPP jsoncpp)
if(NOT JSONCPP_FOUND)
    find_library(JSONCPP_LIBRARIES jsoncpp)
    find_path(JSONCPP_INCLUDE_DIRS json/json.h)
    if(JSONCPP_LIBRARIES AND JSONCPP_INCLUDE_DIRS)
        set(JSONCPP_FOUND TRUE)
        set(JSONCPP_LIBRARIES ${JSONCPP_LIBRARIES})
        set(JSONCPP_INCLUDE_DIRS ${JSONCPP_INCLUDE_DIRS})
    endif()
endif()

# Platform-specific libraries
if(APPLE)
    find_library(SECURITY_FRAMEWORK Security)
    find_library(CORE_FOUNDATION_FRAMEWORK CoreFoundation)
    find_library(SYSTEM_CONFIGURATION_FRAMEWORK SystemConfiguration)
    
    set(PLATFORM_LIBRARIES 
        ${SECURITY_FRAMEWORK}
        ${CORE_FOUNDATION_FRAMEWORK}
        ${SYSTEM_CONFIGURATION_FRAMEWORK}
    )
elseif(UNIX AND NOT APPLE)
    find_library(RT_LIBRARY rt)
    set(PLATFORM_LIBRARIES ${RT_LIBRARY} pthread)
elseif(WIN32)
    set(PLATFORM_LIBRARIES 
        ws2_32
        iphlpapi
        crypt32
        advapi32
        userenv
        shell32
    )
endif()

# Set include directories
set(@PROJECT_NAME@_INCLUDE_DIRS "@PACKAGE_INCLUDE_INSTALL_DIR@")

# Set library directories
set(@PROJECT_NAME@_LIBRARY_DIRS "@PACKAGE_LIBRARY_INSTALL_DIR@")

# Set libraries
set(@PROJECT_NAME@_LIBRARIES 
    "@PACKAGE_LIBRARY_INSTALL_DIR@/lib@PROJECT_NAME@.@CMAKE_SHARED_LIBRARY_SUFFIX@"
    ${OPENSSL_LIBRARIES}
    ${JSONCPP_LIBRARIES}
    ${PLATFORM_LIBRARIES}
)

# Set definitions
set(@PROJECT_NAME@_DEFINITIONS "")
if(APPLE)
    list(APPEND @PROJECT_NAME@_DEFINITIONS PLATFORM_MACOS=1)
elseif(UNIX AND NOT APPLE)
    list(APPEND @PROJECT_NAME@_DEFINITIONS PLATFORM_LINUX=1)
elseif(WIN32)
    list(APPEND @PROJECT_NAME@_DEFINITIONS PLATFORM_WINDOWS=1)
endif()

# Set compile options
set(@PROJECT_NAME@_COMPILE_OPTIONS 
    $<$<CXX_COMPILER_ID:GNU>:-Wall -Wextra -Wpedantic>
    $<$<CXX_COMPILER_ID:Clang>:-Wall -Wextra -Wpedantic>
    $<$<CXX_COMPILER_ID:MSVC>:/W3>
)

# Set compile features
set(@PROJECT_NAME@_COMPILE_FEATURES cxx_std_17)

# Set exported targets
set(@PROJECT_NAME@_EXPORTED_TARGETS "@PROJECT_NAME@")

# Check if package is compatible
check_required_components(@PROJECT_NAME@)

# Create imported target
if(NOT TARGET @PROJECT_NAME@::@PROJECT_NAME@)
    add_library(@PROJECT_NAME@::@PROJECT_NAME@ SHARED IMPORTED)
    set_target_properties(@PROJECT_NAME@::@PROJECT_NAME@ PROPERTIES
        IMPORTED_LOCATION "@PACKAGE_LIBRARY_INSTALL_DIR@/lib@PROJECT_NAME@.@CMAKE_SHARED_LIBRARY_SUFFIX@"
        INTERFACE_INCLUDE_DIRECTORIES "@PACKAGE_INCLUDE_INSTALL_DIR@"
        INTERFACE_COMPILE_DEFINITIONS "${@PROJECT_NAME@_DEFINITIONS}"
        INTERFACE_COMPILE_OPTIONS "${@PROJECT_NAME@_COMPILE_OPTIONS}"
        INTERFACE_COMPILE_FEATURES "${@PROJECT_NAME@_COMPILE_FEATURES}"
    )
    
    # Link dependencies
    target_link_libraries(@PROJECT_NAME@::@PROJECT_NAME@ INTERFACE
        OpenSSL::SSL
        OpenSSL::Crypto
        ${JSONCPP_LIBRARIES}
        ${PLATFORM_LIBRARIES}
    )
endif()

# Set variables for backward compatibility
set(@PROJECT_NAME@_FOUND TRUE)
set(@PROJECT_NAME@_VERSION_STRING "@PROJECT_VERSION@")
set(@PROJECT_NAME@_MAJOR_VERSION "@PROJECT_VERSION_MAJOR@")
set(@PROJECT_NAME@_MINOR_VERSION "@PROJECT_VERSION_MINOR@")
set(@PROJECT_NAME@_PATCH_VERSION "@PROJECT_VERSION_PATCH@")

# Print status message
message(STATUS "Found @PROJECT_NAME@: @PACKAGE_LIBRARY_INSTALL_DIR@ (found version \"@PROJECT_VERSION@\")")
